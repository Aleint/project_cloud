{
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
        "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.16.3"
        },
        "creationTimestamp": "2025-03-13T15:34:39Z",
        "deletionGracePeriodSeconds": 0,
        "deletionTimestamp": "2025-03-13T15:45:46Z",
        "finalizers": [
           
        ],
        "generation": 1,
        "name": "ips.ipam.liqo.io",
        "resourceVersion": "27056",
        "uid": "296aa79d-c268-4b33-aa9b-8f5aabd6df5c"
    },
    "spec": {
        "conversion": {
            "strategy": "None"
        },
        "group": "ipam.liqo.io",
        "names": {
            "categories": [
                "liqo"
            ],
            "kind": "IP",
            "listKind": "IPList",
            "plural": "ips",
            "singular": "ip"
        },
        "scope": "Namespaced",
        "versions": [
            {
                "additionalPrinterColumns": [
                    {
                        "jsonPath": ".spec.ip",
                        "name": "Local IP",
                        "type": "string"
                    },
                    {
                        "jsonPath": ".status.ip",
                        "name": "Remapped IP",
                        "type": "string"
                    },
                    {
                        "jsonPath": ".status.cidr",
                        "name": "Remapped IP CIDR",
                        "type": "string"
                    },
                    {
                        "jsonPath": ".metadata.creationTimestamp",
                        "name": "Age",
                        "type": "date"
                    }
                ],
                "name": "v1alpha1",
                "schema": {
                    "openAPIV3Schema": {
                        "description": "IP is the Schema for the IP API.",
                        "properties": {
                            "apiVersion": {
                                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                "type": "string"
                            },
                            "kind": {
                                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                            },
                            "metadata": {
                                "type": "object"
                            },
                            "spec": {
                                "description": "IPSpec defines a local IP.",
                                "properties": {
                                    "ip": {
                                        "description": "IP is the local IP.",
                                        "format": "ipv4",
                                        "type": "string",
                                        "x-kubernetes-validations": [
                                            {
                                                "message": "IP field is immutable",
                                                "rule": "self == oldSelf"
                                            }
                                        ]
                                    },
                                    "masquerade": {
                                        "description": "Masquerade is a flag to enable masquerade for the local IP on nodes.\nIf empty the masquerade is disabled.",
                                        "type": "boolean"
                                    },
                                    "networkRef": {
                                        "description": "NetworkRef is the reference to the Network CR containing the CIDR where the desired IP should be allocated from.\nIt is optional, if left empty the IP will be allocated in a default network CIDR (e.g., external CIDR).",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "API version of the referent.",
                                                "type": "string"
                                            },
                                            "fieldPath": {
                                                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                                "type": "string"
                                            },
                                            "namespace": {
                                                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                                                "type": "string"
                                            },
                                            "resourceVersion": {
                                                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                                                "type": "string"
                                            },
                                            "uid": {
                                                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "x-kubernetes-map-type": "atomic"
                                    },
                                    "serviceTemplate": {
                                        "description": "ServiceTemplate contains the template to create the associated service (and endpointslice) for the IP endopoint.\nIf empty the creation of the service is disabled (default).",
                                        "properties": {
                                            "metadata": {
                                                "description": "Metadata of the Service.",
                                                "properties": {
                                                    "annotations": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "type": "object"
                                                    },
                                                    "finalizers": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "labels": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "type": "object"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "namespace": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Template Spec of the Service.",
                                                "properties": {
                                                    "allocateLoadBalancerNodePorts": {
                                                        "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically\nallocated for services with type LoadBalancer.  Default is \"true\". It\nmay be set to \"false\" if the cluster load-balancer does not rely on\nNodePorts.  If the caller requests specific NodePorts (by specifying a\nvalue), those requests will be respected, regardless of this field.\nThis field may only be set for services with type LoadBalancer and will\nbe cleared if the type is changed to any other type.",
                                                        "type": "boolean"
                                                    },
                                                    "clusterIP": {
                                                        "description": "clusterIP is the IP address of the service and is usually assigned\nrandomly. If an address is specified manually, is in-range (as per\nsystem configuration), and is not in use, it will be allocated to the\nservice; otherwise creation of the service will fail. This field may not\nbe changed through updates unless the type field is also being changed\nto ExternalName (which requires this field to be blank) or the type\nfield is being changed from ExternalName (in which case this field may\noptionally be specified, as describe above).  Valid values are \"None\",\nempty string (\"\"), or a valid IP address. Setting this to \"None\" makes a\n\"headless service\" (no virtual IP), which is useful when direct endpoint\nconnections are preferred and proxying is not required.  Only applies to\ntypes ClusterIP, NodePort, and LoadBalancer. If this field is specified\nwhen creating a Service of type ExternalName, creation will fail. This\nfield will be wiped when updating a Service to type ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                                                        "type": "string"
                                                    },
                                                    "clusterIPs": {
                                                        "description": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.  If an address is specified manually, is\nin-range (as per system configuration), and is not in use, it will be\nallocated to the service; otherwise creation of the service will fail.\nThis field may not be changed through updates unless the type field is\nalso being changed to ExternalName (which requires this field to be\nempty) or the type field is being changed from ExternalName (in which\ncase this field may optionally be specified, as describe above).  Valid\nvalues are \"None\", empty string (\"\"), or a valid IP address.  Setting\nthis to \"None\" makes a \"headless service\" (no virtual IP), which is\nuseful when direct endpoint connections are preferred and proxying is\nnot required.  Only applies to types ClusterIP, NodePort, and\nLoadBalancer. If this field is specified when creating a Service of type\nExternalName, creation will fail. This field will be wiped when updating\na Service to type ExternalName.  If this field is not specified, it will\nbe initialized from the clusterIP field.  If this field is specified,\nclients must ensure that clusterIPs[0] and clusterIP have the same\nvalue.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order).\nThese IPs must correspond to the values of the ipFamilies field. Both\nclusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "externalIPs": {
                                                        "description": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "externalName": {
                                                        "description": "externalName is the external reference that discovery mechanisms will\nreturn as an alias for this service (e.g. a DNS CNAME record). No\nproxying will be involved.  Must be a lowercase RFC-1123 hostname\n(https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".",
                                                        "type": "string"
                                                    },
                                                    "externalTrafficPolicy": {
                                                        "description": "externalTrafficPolicy describes how nodes distribute service traffic they\nreceive on one of the Service's \"externally-facing\" addresses (NodePorts,\nExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure\nthe service in a way that assumes that external load balancers will take care\nof balancing the service traffic between nodes, and so each node will deliver\ntraffic only to the node-local endpoints of the service, without masquerading\nthe client source IP. (Traffic mistakenly sent to a node with no endpoints will\nbe dropped.) The default value, \"Cluster\", uses the standard behavior of\nrouting to all endpoints evenly (possibly modified by topology and other\nfeatures). Note that traffic sent to an External IP or LoadBalancer IP from\nwithin the cluster will always get \"Cluster\" semantics, but clients sending to\na NodePort from within the cluster may need to take traffic policy into account\nwhen picking a node.",
                                                        "type": "string"
                                                    },
                                                    "healthCheckNodePort": {
                                                        "description": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nThis only applies when type is set to LoadBalancer and\nexternalTrafficPolicy is set to Local. If a value is specified, is\nin-range, and is not in use, it will be used.  If not specified, a value\nwill be automatically allocated.  External systems (e.g. load-balancers)\ncan use this port to determine if a given node holds endpoints for this\nservice or not.  If this field is specified when creating a Service\nwhich does not need it, creation will fail. This field will be wiped\nwhen updating a Service to no longer need it (e.g. changing type).\nThis field cannot be updated once set.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                    },
                                                    "internalTrafficPolicy": {
                                                        "description": "InternalTrafficPolicy describes how nodes distribute service traffic they\nreceive on the ClusterIP. If set to \"Local\", the proxy will assume that pods\nonly want to talk to endpoints of the service on the same node as the pod,\ndropping the traffic if there are no local endpoints. The default value,\n\"Cluster\", uses the standard behavior of routing to all endpoints evenly\n(possibly modified by topology and other features).",
                                                        "type": "string"
                                                    },
                                                    "ipFamilies": {
                                                        "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice. This field is usually assigned automatically based on cluster\nconfiguration and the ipFamilyPolicy field. If this field is specified\nmanually, the requested family is available in the cluster,\nand ipFamilyPolicy allows it, it will be used; otherwise creation of\nthe service will fail. This field is conditionally mutable: it allows\nfor adding or removing a secondary IP family, but it does not allow\nchanging the primary IP family of the Service. Valid values are \"IPv4\"\nand \"IPv6\".  This field only applies to Services of types ClusterIP,\nNodePort, and LoadBalancer, and does apply to \"headless\" services.\nThis field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in\neither order).  These families must correspond to the values of the\nclusterIPs field, if specified. Both clusterIPs and ipFamilies are\ngoverned by the ipFamilyPolicy field.",
                                                        "items": {
                                                            "description": "IPFamily represents the IP Family (IPv4 or IPv6). This type is used\nto express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).",
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "ipFamilyPolicy": {
                                                        "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by\nthis Service. If there is no value provided, then this field will be set\nto SingleStack. Services can be \"SingleStack\" (a single IP family),\n\"PreferDualStack\" (two IP families on dual-stack configured clusters or\na single IP family on single-stack clusters), or \"RequireDualStack\"\n(two IP families on dual-stack configured clusters, otherwise fail). The\nipFamilies and clusterIPs fields depend on the value of this field. This\nfield will be wiped when updating a service to type ExternalName.",
                                                        "type": "string"
                                                    },
                                                    "loadBalancerClass": {
                                                        "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to.\nIf specified, the value of this field must be a label-style identifier, with an optional prefix,\ne.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users.\nThis field can only be set when the Service type is 'LoadBalancer'. If not set, the default load\nbalancer implementation is used, today this is typically done through the cloud provider integration,\nbut should apply for any default implementation. If set, it is assumed that a load balancer\nimplementation is watching for Services with a matching class. Any default load balancer\nimplementation (e.g. cloud providers) should ignore Services that set this field.\nThis field can only be set when creating or updating a Service to type 'LoadBalancer'.\nOnce set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
                                                        "type": "string"
                                                    },
                                                    "loadBalancerIP": {
                                                        "description": "Only applies to Service Type: LoadBalancer.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\nDeprecated: This field was under-specified and its meaning varies across implementations.\nUsing it is non-portable and it may not support dual-stack.\nUsers are encouraged to use implementation-specific annotations when available.",
                                                        "type": "string"
                                                    },
                                                    "loadBalancerSourceRanges": {
                                                        "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "ports": {
                                                        "description": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                                                        "items": {
                                                            "description": "ServicePort contains information on service's port.",
                                                            "properties": {
                                                                "appProtocol": {
                                                                    "description": "The application protocol for this port.\nThis is used as a hint for implementations to offer richer behavior for protocols that they understand.\nThis field follows standard Kubernetes label syntax.\nValid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as\nmycompany.com/my-custom-protocol.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.",
                                                                    "type": "string"
                                                                },
                                                                "nodePort": {
                                                                    "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "port": {
                                                                    "description": "The port that will be exposed by this service.",
                                                                    "format": "int32",
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "default": "TCP",
                                                                    "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.",
                                                                    "type": "string"
                                                                },
                                                                "targetPort": {
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "integer"
                                                                        },
                                                                        {
                                                                            "type": "string"
                                                                        }
                                                                    ],
                                                                    "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
                                                                    "x-kubernetes-int-or-string": true
                                                                }
                                                            },
                                                            "required": [
                                                                "port"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-map-keys": [
                                                            "port",
                                                            "protocol"
                                                        ],
                                                        "x-kubernetes-list-type": "map"
                                                    },
                                                    "publishNotReadyAddresses": {
                                                        "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this\nService should disregard any indications of ready/not-ready.\nThe primary use case for setting this field is for a StatefulSet's Headless Service to\npropagate SRV DNS records for its Pods for the purpose of peer discovery.\nThe Kubernetes controllers that generate Endpoints and EndpointSlice resources for\nServices interpret this to mean that all endpoints are considered \"ready\" even if the\nPods themselves are not. Agents which consume only Kubernetes generated endpoints\nthrough the Endpoints or EndpointSlice resources can safely assume this behavior.",
                                                        "type": "boolean"
                                                    },
                                                    "selector": {
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        },
                                                        "description": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/",
                                                        "type": "object",
                                                        "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "sessionAffinity": {
                                                        "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                                                        "type": "string"
                                                    },
                                                    "sessionAffinityConfig": {
                                                        "description": "sessionAffinityConfig contains the configurations of session affinity.",
                                                        "properties": {
                                                            "clientIP": {
                                                                "description": "clientIP contains the configurations of Client IP based session affinity.",
                                                                "properties": {
                                                                    "timeoutSeconds": {
                                                                        "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trafficDistribution": {
                                                        "description": "TrafficDistribution offers a way to express preferences for how traffic is\ndistributed to Service endpoints. Implementations can use this field as a\nhint, but are not required to guarantee strict adherence. If the field is\nnot set, the implementation will apply its default routing strategy. If set\nto \"PreferClose\", implementations should prioritize endpoints that are\ntopologically close (e.g., same zone).\nThis is an alpha field and requires enabling ServiceTrafficDistribution feature.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing\nto endpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object or\nEndpointSlice objects. If clusterIP is \"None\", no virtual IP is\nallocated and the endpoints are published as a set of endpoints rather\nthan a virtual IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the same endpoints as the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an external load-balancer\n(if supported in the current cloud) which routes to the same endpoints\nas the clusterIP.\n\"ExternalName\" aliases this service to the specified externalName.\nSeveral other fields do not apply to ExternalName services.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "ip"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "IPStatus defines remapped IPs.",
                                "properties": {
                                    "cidr": {
                                        "description": "CIDR is the network CIDR where the IP is allocated.",
                                        "format": "cidr",
                                        "type": "string",
                                        "x-kubernetes-validations": [
                                            {
                                                "message": "CIDR field is immutable",
                                                "rule": "self == oldSelf"
                                            }
                                        ]
                                    },
                                    "ip": {
                                        "description": "IP is the remapped IP.",
                                        "format": "ipv4",
                                        "type": "string",
                                        "x-kubernetes-validations": [
                                            {
                                                "message": "IP field is immutable",
                                                "rule": "self == oldSelf"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "spec"
                        ],
                        "type": "object"
                    }
                },
                "served": true,
                "storage": true,
                "subresources": {
                    "status": {}
                }
            }
        ]
    },
    "status": {
        "acceptedNames": {
            "categories": [
                "liqo"
            ],
            "kind": "IP",
            "listKind": "IPList",
            "plural": "ips",
            "singular": "ip"
        },
        "conditions": [
            {
                "lastTransitionTime": "2025-03-13T15:34:39Z",
                "message": "no conflicts found",
                "reason": "NoConflicts",
                "status": "True",
                "type": "NamesAccepted"
            },
            {
                "lastTransitionTime": "2025-03-13T15:34:39Z",
                "message": "the initial names have been accepted",
                "reason": "InitialNamesAccepted",
                "status": "True",
                "type": "Established"
            },
            {
                "lastTransitionTime": "2025-03-13T15:45:46Z",
                "message": "CustomResource deletion is in progress",
                "reason": "InstanceDeletionInProgress",
                "status": "True",
                "type": "Terminating"
            }
        ],
        "storedVersions": [
            "v1alpha1"
        ]
    }
}
